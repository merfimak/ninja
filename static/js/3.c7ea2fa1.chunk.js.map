{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.js","components/Profile/MyPosts/MyPosts.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/ProfileInfo/ProfileStatus.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["module","exports","Post","props","className","classes","post","post_ava","src","alt","massage","like","MyPosts","React","memo","newPostElem","createRef","postsElements","profilePage","postData","map","elem","likesCount","my_posts","new_post","onChange","text","current","value","onPostChange","ref","newPostText","onClick","onAddPost","posts","MyPostsContainer","connect","state","dispatch","updateNewPostActionCreator","addPostActionCreator","Component","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","profile_status","onDoubleClick","e","currentTarget","autoFocus","type","onBlur","updateStatus","ProfileInfo","profile","profile_info","content_img","photos","large","ava_descriptioin","userId","fullName","aboutMe","prelouder","Profile","store","ProfileAPIContainer","this","match","params","my_id","history","push","getUsersProfile","getStatus","compose","auth","id","withRouter"],"mappings":"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","file":"static/js/3.c7ea2fa1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"ProfileInfo_profile_info__qNtTp\",\"ava_descriptioin\":\"ProfileInfo_ava_descriptioin__1G0MA\",\"content_img\":\"ProfileInfo_content_img__12aHx\",\"profile_status\":\"ProfileInfo_profile_status__2DmFc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"my_posts\":\"MyPosts_my_posts__28kMX\",\"posts\":\"MyPosts_posts__1HQBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2doHh\",\"post_ava\":\"Post_post_ava__6kVLz\"};","import classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n  \r\n\r\n      <div className={classes.post}>\r\n      <div className={classes.post_ava}><img src=\"img/post_ava.jpg\" alt=\"\"></img></div>\r\n      \r\n      {props.massage}\r\n\r\n      \r\n\r\n\r\n      <div className={classes.like}>like: {props.like} </div>\r\n      </div>\r\n  \r\n\r\n            \r\n   )\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n\r\n//console.log(props)\r\nlet newPostElem = React.createRef();\r\n\r\nlet addPost = () =>{\r\n props.onAddPost();\r\n};\r\n\r\nlet updateNewPost = () => {\r\nlet text = newPostElem.current.value;\r\nprops.onPostChange(text);\r\n\r\n}\r\n//onChange - срабатывате при изменении\r\n\r\nlet postsElements = props.profilePage.postData.map( elem => <Post massage={elem.massage} like={elem.likesCount}/>)\r\n\r\n  return (\r\n  \r\n      <div className={classes.my_posts}>\r\n\r\n      <h3> My posts</h3>\r\n        <div className={classes.new_post}>\r\n\r\n          <div>\r\n          <textarea onChange={updateNewPost} ref={newPostElem} value={props.profilePage.newPostText}/>\r\n          </div>\r\n\r\n          <button onClick={ addPost }>Add post</button>\r\n      </div>\r\n\r\n\r\n\r\n\r\n          <div className={classes.posts}>\r\n            {postsElements}\r\n            \r\n          </div>\r\n\r\n      </div>\r\n\r\n    \r\n   )\r\n})\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport {updateNewPostActionCreator} from '../../../redux/prpofile_reducer.js';\r\nimport {addPostActionCreator} from '../../../redux/prpofile_reducer.js';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\n// эта функция передает свойства\r\nlet mapStateToProps = (state) =>{\r\n\treturn{\r\n\t\tprofilePage: state.profilePage\r\n\r\n\t}\r\n}\r\n//эта функция передает функции которые мы будем потом использовать в призентациооной компоненте\r\nlet mapDispatchToProps = (dispatch) =>{\r\n\treturn{\r\n\t\tonPostChange:  (text) => {\r\n\t\t\tdispatch(updateNewPostActionCreator(text));\r\n\t\t},\r\n\t\tonAddPost: () => {\r\n\t\t\tdispatch(addPostActionCreator());\r\n\t\t}\r\n\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import classes from './ProfileInfo.module.css';\r\nimport React from 'react';\r\n\r\n\r\nclass ProfileStatus extends React.Component{\r\n\r\n\t\tconstructor(props) {\r\n\t    super(props);\r\n\t  }\r\n\r\n\r\n//у классовой компоненты есть локальный state\r\nstate = {\r\n\teditMode: false,\r\n\tstatus: this.props.status//засунули глобальный state  в локальный\r\n}\r\n\r\n\r\nactivateEditMod = () => {\r\n\t//локальный state меняется только через функцию this.setState которую он взял из React.Component\r\n\t//работает асинхронно\r\n\tthis.setState({\r\n\t\teditMode: true\r\n\t})\r\n}\r\n\r\ndeActivateEditMod = () => {\r\n\t//локальный state меняется только через функцию this.setState которую он взял из React.Component\r\n\t//работает асинхронно\r\n\tthis.setState({\r\n\t\teditMode: false\r\n\t});\r\n\tthis.props.updateStatus(this.state.status);//когда фокус снимаеться с инпута то сразу отправиться новый статус в базу\r\n}\r\n\r\nonStatusChange = (e) => {\r\n\tthis.setState({\r\n\t\tstatus: e.currentTarget.value\r\n\t});\r\n\r\n\r\n}\r\n//сработает когда либо пропсы изменяться либо локальный стейт измениться\r\ncomponentDidUpdate(prevProps, prevState){\r\n\tif(prevProps.status !== this.props.status){\r\n\t\tthis.setState({\r\n\t\t\tstatus: this.props.status\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\nrender(){\r\n\t\treturn (\r\n\t\t\t<div className={classes.profile_status}>\r\n\t\t\t{console.log('tttotot')}\r\n\t\t\t\t{!this.state.editMode &&\r\n\t\t\t    \t<div>\r\n\t\t\t    \t\t<span onDoubleClick={ this.activateEditMod  }>{this.props.status || \"_____\"}</span>\r\n\t\t\t    \t</div> \r\n\t\t    \t}\r\n\t\t    \t{this.state.editMode &&\r\n\t\t\t    \t<div>\r\n\t\t\t    \t\t<input onChange={this.onStatusChange} autoFocus={true} onBlur={ this.deActivateEditMod  } type=\"text\" value={this.state.status} />\r\n\t\t\t    \t</div> \r\n\t\t    \t}\r\n\t\t     </div>       \r\n   )\r\n\t\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import classes from './ProfileInfo.module.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n//локальный state\t\r\n//let stateWithSetState = useState(false); //возваращает массив из двух элиментов\r\n//let editMode = stateWithSetState[0];// первый это значение которое в стейте хранитсья(в данном стлучаи false) \r\n//let setEditMode = stateWithSetState[1];// второй это функция с помощью которой мы можем этот стейт изменять\r\n\r\nlet [editMode, setEditMode] = useState(false);\r\nlet [status, setStatus] = useState(props.status);\r\n\r\n\r\n//сработает когда дом будет построен, типо как componentDidMount в классовой компоненте\r\nuseEffect(  () => (\r\nsetStatus(props.status)\r\n\t), [props.status]// перерисовываем только тогда когда меняеться статус в пропсах\r\n)\r\n\r\n\r\n\r\n\r\n\r\nconst activateEditMod = () => {\r\n\tsetEditMode(true)\r\n}\r\nconst deActivateEditMod = () => {\r\n\tsetEditMode(false)\r\nprops.updateStatus(status);//когда фокус снимаеться с инпута то сразу отправиться новый статус в базу\r\n}\r\nconst onStatusChange = (e) => {\r\n\tsetStatus(e.currentTarget.value)\r\n}\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div className={classes.profile_status}>\r\n\t\t\r\n\t\t\t\t{!editMode &&\r\n\t\t\t    \t<div>\r\n\t\t\t    \t\t<span  onDoubleClick={ activateEditMod  }>{ props.status || \"_____\"}</span>\r\n\t\t\t    \t</div> \r\n\t\t    \t}\r\n\t\t    \t{editMode &&\r\n\t\t\t    \t<div>\r\n\t\t\t    \t\t<input onChange={ onStatusChange}  autoFocus={true}  type=\"text\"  onBlur={ deActivateEditMod  }  value={status} />\r\n\t\t\t    \t</div> \r\n\t\t    \t}\r\n\t\t     </div>       \r\n   )\r\n\t\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import classes from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport prelouder from '../../../assets/images/prelouder.gif';\r\nconst ProfileInfo = (props) => {\r\n\tif(!props.profile){\r\n\t\treturn (\r\n\t\t\t<div><img src={prelouder} /></div>\r\n\t\t\t)\r\n\r\n\t\t\t\t}else{\r\n\t\t  return (\r\n  \r\n              <div className={classes.profile_info}>\r\n                <div className={classes.content_img}><img src={props.profile.photos.large} alt=\"\"></img></div>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n            \r\n          <div className={classes.ava_descriptioin}><span>id</span>  -  {props.profile.userId}</div>\r\n          <div className={classes.ava_descriptioin}><span>name</span>  -   {props.profile.fullName}</div>\r\n         <div className={classes.ava_descriptioin}><span>aboutMe</span>  -  {props.profile.aboutMe}</div>\r\n              </div>\r\n\r\n            \r\n   )\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import classes from './Profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\n\r\nconst Profile = (props) => {\r\n\t\r\n  return (\r\n   <div>\r\n \r\n              <ProfileInfo profile={props.profile}  status={props.status} updateStatus={props.updateStatus} />\r\n          \r\n            <MyPostsContainer store={props.store}/>\r\n           \r\n\r\n            </div>\r\n   )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {getUsersProfile, getStatus, updateStatus} from '../../redux/prpofile_reducer.js';//тут ошибка в названиее prpofile_reducer\r\nimport Profile from './Profile';\r\nimport * as axios from 'axios';//в axios есть куча всего, * значит что все что есть в axios мы запиздячили в наш axios и теперь через него у нас есть доступ ко всему что там есть.\r\nimport { withRouter } from \"react-router\";\r\nimport {usersAPI} from '../../api/api.js';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect.js';\r\nimport { compose } from 'redux';\r\n\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\n//оберточная компонента которая работает с сервером\r\nclass ProfileAPIContainer extends React.Component {\r\n\t\tconstructor(props) {\r\n\t    super(props);\r\n\t  }\r\n\r\n\r\n\t//сработает когда дом будет построен\r\n\t\tcomponentDidMount() {\r\n\t\t\tlet userId = this.props.match.params.userId;\r\n\t\t\tif(!userId){\r\n\t\t\t\tuserId = this.props.my_id;\r\n\t\t\t\tif(!userId){\r\n\t\t\t\t\tthis.props.history.push(\"/users\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n       \t\tthis.props.getUsersProfile(userId);//это санка\r\n       \t\tthis.props.getStatus(userId);//это санка\r\n\r\n\t\t  }\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\t return (\r\n  \t\t\t <div>\r\n              <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n\t  \t\t\t\t )\r\n\t\t}\r\n\t \r\n\t}\r\n\r\n\r\n//это хок который проверят авторизацию\r\n//let AuthRedirectComponent = withAuthRedirect(ProfileAPIContainer)\r\n\r\n/*let mapStateToPropsForRedirect = (state) =>({\r\n\tisAuth: state.auth.isAuth\r\n});\r\nAuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);*/\r\n\r\n//let withUrlDataProfileAPIContainer = withRouter(AuthRedirectComponent);//withRouter как и connect вернет ProfileAPIContainer но уже с добавлениями данных из url\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////оберточная компонента которая работает с стором\r\n\r\n\r\n\r\nlet mapStateToProps = (state) =>({\r\n\tprofile: state.profilePage.profile,\r\n\tstatus: state.profilePage.status,\r\n\tmy_id: state.auth.id,\r\n});\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps,{getUsersProfile,getStatus,updateStatus}),//добавляет инфу Props в из State\r\n\twithRouter,//Компонент высшего порядка,withRouter как и connect вернет компоненту но уже с добавлениями данных из url\r\n\t//withAuthRedirect//проверка на авторизацию\r\n\t)(ProfileAPIContainer);\r\n\r\n//export default connect(mapStateToProps,{getUsersProfile})(withUrlDataProfileAPIContainer);"],"sourceRoot":""}